Weighbridge frontend code

Thunder Client check    http://localhost:9090/check?role=admin&userId=L0001&password=S@123

App.js
-------
// App.js
import React, { useState } from 'react';
import Login from './components/Login Page/Login';
import {Routes,Route} from "react-router-dom";
import Home from './components/Home';
import VendorList from './components/Vendor Page/Vendor';
import Admin from './components/Admin Page/Admin';
import CreateUser from './components/Admin Page/CreateUser'

const App = () => {

    return (
        <div>
            <Routes>
                <Route path='/' element ={<Login/>}/>  
                <Route path='/home' element ={<Home/>}/>
                <Route path='/vendor' element ={<VendorList/>}/>
                <Route path='/Admin' element ={<Admin/>} />
                <Route path='/Admin' element ={<CreateUser/>} />
            </Routes>
        
        </div>
    );
};

export default App;

App.css
-------
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


Login.js
--------
import React, { useState } from 'react';
import './Login.css';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const Login = () => {
  const [role, setRole] = useState('admin');
  const [userId, setUserId] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();

  const submitForm = async () => {
    try {
      const response = await axios.post(
        `http://localhost:9090/check?role=${role}&userId=${userId}&password=${password}`
      );
      console.log(response.data)
      // const responseMessage = response.data.trim(); // Trim any leading/trailing whitespace
      // Login successful!
      if (response.data === "Login successful!") {
        if (role === 'admin') {
          navigate('/admin');
        } else if (role === 'user') {
          navigate('/user');
        } else {
          alert('Invalid role');
        }
      } else {
        alert('Invalid credentials');
      }
    } catch (error) {
      console.error('Error during login:', error);
      console.error('Server response:', error.response?.data);
      alert('An error occurred during login');
    }
  };

  return (
    <div className="App">
      <div className="login-container">
        <div className="logo-container">
          <img
            className="logo"
            src="https://ldtech.in/wp-content/uploads/2024/01/logo.png"
            alt="WeighBridge Management App Logo"
          />
        </div>
        <h2>WeighBridge App</h2>
        <div className="form-group">
          <form>
            <label htmlFor="role">Role:</label>
            <select
              id="role"
              name="role"
              value={role}
              onChange={(e) => setRole(e.target.value)}
            >
              <option value="admin">Admin</option>
              <option value="user">Supervisor</option>
              <option value="admin">TruckDetails</option>
              <option value="user">Manager</option>
              <option value="admin">Vendor</option>
              <option value="user">Qc</option>
            </select>
            <div>
              <label htmlFor="userId">UserId:</label>
              <input
                type="text"
                id="userId"
                name="userId"
                value={userId}
                onChange={(e) => setUserId(e.target.value)}
                required
              />
            </div>
            <div>
              <label htmlFor="password">Password:</label>
              <input
                type="password"
                id="password"
                name="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
            </div>
            <button type="button" onClick={submitForm}>
              Login
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Login;



Login.css
---------
/* Login.css */
body {
  font-family: Arial, sans-serif;
  background-color: #0e91ee;
  margin: 0;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100vh;
  color: white; /* Set text color to white for the entire body */
}

.logo-container {
  text-align: center;
  margin-bottom: 20px;
}

.logo {
  width: 80px;
  height: auto;
}

.login-container {
  height: 420px;
  width: 300px;
  background: linear-gradient(to right, #000000, #333333);
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  color: white; /* Add this line to set text color to white inside the login container */
}

.form-group {
  margin-bottom: 15px;
}

label {
  display: block;
  margin-bottom: 5px;
}

select,
input {
  width: 100%;
  padding: 8px;
  box-sizing: border-box;
  margin-bottom: 10px;
}

button:hover {
  background-color: #45a049;
}

input[type="password"] {
  width: 100%;
  padding: 8px;
  box-sizing: border-box;
  margin-bottom: 15px; /* Add margin-bottom to create space below the password input field */
}

button {
  background-color: #4caf50;
  color: #fff;
  padding: 10px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-top: 10px; /* Add margin-top to create space above the button */
}


Admin.js
--------
// Admin.js
import React, { useEffect } from 'react';
import './Admin.css'; 
function Admin() {
  // useEffect to set today's date on component mount
  useEffect(() => {
    const today = new Date().toISOString().split('T')[0];
    document.getElementById("datePicker").value = today;
  }, []);

  // Function to handle redirection to add_user_dashboard
  const redirectToAddUserDashboard = () => {
    window.location.href = 'CreateUser';
  };

  return (
    <div>
      <header className="header">
        <div className="header-left">
          <div id="navbar-left">
            <input type="date" id="datePicker" />
            <select id="selectDropdown">
              <option value="Vikram">Vikram</option>
              <option value="Highlander">Highlander</option>
            </select>
          </div>
        </div>
        <h1 className="header-title">Admin Screen</h1>
      </header>

      <div className="container">
        {/* User Management Frame */}
        <div className="frame">
          <div className="frame-header">
            <h2>User Management</h2>
            <input type="text" placeholder="Search users" className="form-control" />&nbsp;
            <button id="add-user" onClick={redirectToAddUserDashboard} className="btn btn-success">Add User</button>
          </div>
          <div className="filters">
            <label htmlFor="role-filter">Filter by Role:</label>
            <select id="role-filter" className="form-control">
              <option value="all">All</option>
              <option value="manager">Manager</option>
              <option value="supervisor">Supervisor</option>
            </select>
            <label htmlFor="status-filter">Filter by Status:</label>
            <select id="status-filter" className="form-control">
              <option value="all">All</option>
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
            </select>
          </div>
          <div className="frame-content">
            <table className="table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Role</th>
                  <th>Responsibility</th>
                  <th>ContactNo</th>
                  <th>Email</th>
                  <th>Date</th>
                  <th>Status</th>
                  <th colSpan="2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Action</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>John Doe</td>
                  <td>Manager</td>
                  <td>Manage Teams</td>
                  <td>123-456-7890</td>
                  <td>john.doe@example.com</td>
                  <td>2022-01-05</td>
                  <td>Active</td>
                  <td><button className="btn btn-primary">Edit User</button></td>
                  <td><button className="btn btn-danger">Remove User</button></td>
                </tr>
                <tr>
                  <td>Jane Smith</td>
                  <td>Supervisor</td>
                  <td>Quality Control</td>
                  <td>987-654-3210</td>
                  <td>jane.smith@example.com</td>
                  <td>2022-01-06</td>
                  <td>Inactive</td>
                  <td><button className="btn btn-primary">Edit User</button></td>
                  <td><button className="btn btn-danger">Remove User</button></td>
                </tr>
                {/* Add more rows as needed */}
              </tbody>
            </table>
          </div>
        </div>

        {/* Responsibility Assignment Frame */}
        <div className="frame">
          <div className="frame-header">
            <h2>Responsibility Assignment</h2>
          </div>
          <div className="frame-content">
            <div className="responsibility-assignment">
              <label htmlFor="user-list">Select User:</label>
              <select id="user-list" className="form-control">
                {/* User list will be dynamically populated here */}
              </select>
              <label htmlFor="responsibility-list">Select Responsibility:</label>
              <select id="responsibility-list" className="form-control">
                <option value="manage-teams">Manage Teams</option>
                <option value="quality-control">Quality Control</option>
                {/* Add more responsibilities as needed */}
              </select>
              <button id="assign-responsibility" className="btn btn-primary">Assign Responsibility</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Admin;


Admin.css
---------
/* Admin.css */

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f4f4f4;
  }
  
  .header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 20px;
    background-color: #ffffff;
    color: #050505;
  }
  
  .header-left {
    display: flex;
    align-items: center;
  }
  
  /* Add these styles */
  #datePicker,
#selectDropdown {
  margin-right: 10px;
}


.header-title {
  margin: 0;
}
  
.container {
    display: flex;
    flex-direction: column;
    margin-bottom: -450px;
    width: 1000px; /* Set width to 100% */
    box-sizing: border-box; /* Include padding and borders in width calculation */
  }
  
  .frame {
    border: 1px solid #ddd;
    margin: 20px;
    padding: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }
  
  .frame-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }
  
  .frame-header h2 {
    color: #333;
    margin: 0;
  }
  
  .frame-content {
    max-width: 800px;
    margin: 0 auto;
    margin-left: 20px;
  }
  
  table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
  }
  
  table, th, td {
    border: 1px solid #ddd;
  }
  
  th, td {
    padding: 12px;
    text-align: left;
  }
  
  th {
    background-color: #f5f5f5;
  }
  
  tbody tr:nth-child(even) {
    background-color: #f9f9f9;
  }
  
  .filters, .action-buttons {
    margin-bottom: 20px;
  }
  
  label {
    color: #555;
  }
  
  input, select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin-bottom: 10px;
  }
  
  button {
    padding: 10px 15px;
    background-color: #4CAF50;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  button:hover {
    background-color: #45a049;
  }
  
  .responsibility-assignment {
    display: flex;
    flex-direction: column;
  }
  

Vendor.js
---------
import React, { useState } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import './Vendor.css';

// Vendor component
const Vendor = () => {
  const [showAddUpdateVendorFrame, setShowAddUpdateVendorFrame] = useState(false);

  const handleAddVendorClick = () => {
    setShowAddUpdateVendorFrame(true);
  };

  const handleCancelVendorClick = () => {
    setShowAddUpdateVendorFrame(false);
  };

  const handleSaveVendor = () => {
    // Implement your save logic here
  };

  return (
    <div className="container-fluid">
      <div className="header">
        <h1 className="text-center mt-4 mb-4 font-heading">Vendor Screen</h1>
      </div>

      <div className="frame">
        <div className="frame-header">
          <h4 className="font-subheading">Vendor List</h4>
          <input type="text" placeholder="Search vendors" className="form-control search-bar" />
        </div>
        <div className="frame-content">
          <div className="table-responsive" style={{ overflowX: 'auto' }}>
            <table className="table table-striped">
              <thead>
                <tr>
                  <th>Veh No</th>
                  <th>T.Name</th>
                  <th>Vendor</th>
                  <th>DL</th>
                  <th>Mining</th>
                  <th>Location</th>
                  <th>Material</th>
                  <th>M.Grade</th>
                  <th>Contact</th>
                  <th>Mail</th>
                  <th>Action</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>123ABC</td>
                  <td>TransportXYZ</td>
                  <td>Vendor A</td>
                  <td>DL12345</td>
                  <td>Mining Corp</td>
                  <td>Location XYZ</td>
                  <td>Iron Ore</td>
                  <td>Large</td>
                  <td>987-654-3210</td>
                  <td>vendorA@mail.com</td>
                  <td>
                    <button className="btn btn-primary ">Edit</button>
                  </td>
                </tr>
                {/* Add more vendor rows as needed */}
              </tbody>
            </table>
          </div>
          <div className="buttons">
            <div className="action-buttons">
              <button className="btn btn-success" onClick={handleAddVendorClick}>Add Vendor</button>
              <button className="btn btn-danger">Delete Vendor</button>
              <button className="btn btn-warning">Edit Vendor</button>
            </div>
          </div>
        </div>
      </div>

      {showAddUpdateVendorFrame && (
        <div className="frame">
          <div className="frame-header">
            <h2 className="font-subheading">Add/Update Vendor</h2>
          </div>
          <div className="frame-content">
          <label htmlFor="vehicle-no">Vehicle No:</label>
            <input type="text" id="vehicle-no" className="form-control" placeholder="Enter vehicle number" />

            <label htmlFor="transport-name">Transport Name:</label>
            <input type="text" id="transport-name" className="form-control" placeholder="Enter transport name" />

            <label htmlFor="vendor-name">Vendor Name:</label>
            <input type="text" id="vendor-name" className="form-control" placeholder="Enter vendor name" />

            <label htmlFor="driver-dl">Driver DL:</label>
            <input type="text" id="driver-dl" className="form-control" placeholder="Enter driver DL" />

            <label htmlFor="mining">Mining:</label>
            <input type="text" id="mining" className="form-control" placeholder="Enter mining details" />

            <label htmlFor="location">Location:</label>
            <input type="text" id="location" className="form-control" placeholder="Enter location" />

            <label htmlFor="material">Material:</label>
            <input type="text" id="material" className="form-control" placeholder="Enter material" />

            <label htmlFor="grade-size">Grade Size:</label>
            <input type="text" id="grade-size" className="form-control" placeholder="Enter grade size" />

            <label htmlFor="contact-no">Contact No:</label>
            <input type="text" id="contact-no" className="form-control" placeholder="Enter contact number" />

            <label htmlFor="email">Mail:</label>
            <input type="text" id="email" className="form-control" placeholder="Enter email" />

            <div className="buttons mt-4">
              <button className="btn btn-primary" onClick={handleSaveVendor}>Save</button>
              <button className="btn btn-secondary" onClick={handleCancelVendorClick}>Cancel</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Vendor;


Vendor.css
----------
/* YourCustomStyles.css */

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f8f9fa; /* Light gray background */
}

.frame {
    border: 1px solid #ced4da; /* Light border color */
    margin: 20px auto; /* Center the frame horizontally */
    padding: 20px;
    background-color: #ffffff; /* White background */
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    max-width: 1200px; /* Adjust the max-width as needed */
}

.frame-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.frame-header h4 {
    color: #007bff; /* Blue header text color */
}

.frame-content {
    margin: 0 auto; /* Center the content within the frame */
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

table, th, td {
    border: 1px solid #ced4da; /* Light border color */
}

th, td {
    padding: 12px;
    text-align: left;
}

th {
    background-color: #f5f5f5; /* Light gray header background */
    color: #333; /* Dark header text color */
}

tbody tr:nth-child(even) {
    background-color: #f9f9f9; /* Alternate row background color */
}

.buttons {
    margin-top: 20px;
    display: flex;
    justify-content: space-between;
}

.buttons button {
    padding: 10px 15px;
    background-color: #28a745; /* Green button background color */
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease; /* Smooth color transition */
}

.buttons button:hover {
    background-color: #218838; /* Darker green on hover */
}

.action-buttons button {
    margin-right: 10px;
}

#add-update-vendor-frame {
    display: none;
}

/* Responsive Design */
@media only screen and (max-width: 600px) {
    .frame {
        margin: 10px;
        padding: 15px;
    }

    .table th,
    .table td {
        text-align: left;
    }

    .buttons button {
        padding: 8px 12px;
    }

    table {
        font-size: 14px;
    }
}

.table-responsive {
    overflow-x: auto;
}

.table th,
.table td {
    text-align: center;
}

 
